package aDomainname.appname.modulename;


import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.edge.EdgeDriver;
import org.testng.annotations.AfterClass;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.AfterSuite;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.BeforeSuite;

import com.comcast.crm.listnerutility.Login;
import com.comcast.crm.listnerutility.home;

import co.cast.DataBaseUtitlity.DatabaseUtility;
import co.cast.generic.FileUtility.ExcelUtility;
import co.cast.generic.FileUtility.FileUtility;
import co.cast.generic.FileUtility.JsonUtility;
import co.cast.generic.WebDriverUtitlity.JavaUtility;
import co.cast.generic.WebDriverUtitlity.WebDriverUtility;

public class BaseClass {
public 	DatabaseUtility dlib=new DatabaseUtility();
public 	ExcelUtility elib=new ExcelUtility();
public 	FileUtility flib=new FileUtility();
public 	JsonUtility jlib=new JsonUtility();
public 	JavaUtility jvlib=new JavaUtility();
public 	WebDriverUtility wlib=new WebDriverUtility();

public WebDriver driver=null;
	@BeforeSuite

	public void configBs() throws Throwable {
		System.out.println("======database connection =======")	;
		//dlib.getDbConnection();
		}
	
	@BeforeClass
	public void configBc() throws Throwable {
	String browser=	flib.getDataFromPropertiesFile("browser");
	

	if(browser.equals("chrome")) {
		driver=new ChromeDriver();
	}else if(browser.equals("firefox")) {
		driver=new ChromeDriver();
	}else if(browser.equals("edge")) {
		driver=new EdgeDriver();
	}else {
		driver=new ChromeDriver();
	}
	}
	@BeforeMethod
	public void configBm() throws Exception {
		wlib.WaitForPageToLoad(driver);;
	String url=	flib.getDataFromPropertiesFile("url");
	String un=flib.getDataFromPropertiesFile("username");
	String pwd=flib.getDataFromPropertiesFile("password");
	
	
		driver.get(url);
		Login lo=new Login(driver);
		lo.loginToApp(un, pwd);
		

	}
	@AfterMethod
	public void configAm() {
		
	home ho=new home(driver);
	ho.logout();

	}
	@AfterClass
	public void configAc() {
			;

	}
	@AfterSuite
	public void configAs() {
		;

	}
	
	
	
	
	
	
	
	
	
}
